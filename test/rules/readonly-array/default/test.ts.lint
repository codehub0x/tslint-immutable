
// -- Variable declarations

// Should not fail on ReadonlyArray in variable declaration (TypeReferenceNode)
const foo: ReadonlyArray<string> = [];

// Should fail on Array type in variable declaration (TypeReferenceNode)
const foo: Array<string> = [];
           ~~~~~~~~~~~~~ [failure]

// Should fail on implicit Array type in variable declaration (ArrayLiteralExpression)
const foo = [1, 2, 3]
      ~~~ [failure]

// -- Interface

// Should fail on Array type in interface (TypeReferenceNode)
interface Foo {
  bar: Array<string>
       ~~~~~~~~~~~~~ [failure]
}

// -- Type declaration

// Should not fail on ReadonlyArray type alias (TypeReferenceNode)
type Foo = ReadonlyArray<string>;

// Should fail on Array type alias (TypeReferenceNode)
type Foo = Array<string>;
           ~~~~~~~~~~~~~ [failure]

// Should fail on Array as type member (TypeReferenceNode)
type Foo = {
  bar: Array<string>
       ~~~~~~~~~~~~~ [failure]
}

// -- Type literal

// Should fail on Array as type literal member (TypeReferenceNode)
let foo: { bar: Array<string> };
                ~~~~~~~~~~~~~ [failure]

[failure]: Only ReadonlyArray allowed.
