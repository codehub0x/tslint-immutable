// -- Top-level type declaration

// Should not fail on ReadonlyArray type alias (TypeReferenceNode)
type Foo = ReadonlyArray<string>;

// Should fail on Array type alias (TypeReferenceNode)
type Foo = Array<string>;
           ~~~~~~~~~~~~~ [failure]

// Should fail on Array as type member (TypeReferenceNode)
type Foo = {
  bar: Array<string>
       ~~~~~~~~~~~~~ [failure]
}

// -- Local type declaration

function foo() {

  // Should not fail on ReadonlyArray type alias (TypeReferenceNode)
  type Foo = ReadonlyArray<string>;

  // Should fail on Array type alias (TypeReferenceNode)
  type Foo = Array<string>;
             ~~~~~~~~~~~~~ [failure]

  // Should fail on Array as type member (TypeReferenceNode)
  type Foo = {
    bar: Array<string>
         ~~~~~~~~~~~~~ [failure]
  }

}

const foo = () => {

  // Should not fail on ReadonlyArray type alias (TypeReferenceNode)
  type Foo = ReadonlyArray<string>;

  // Should fail on Array type alias (TypeReferenceNode)
  type Foo = Array<string>;
             ~~~~~~~~~~~~~ [failure]

  // Should fail on Array as type member (TypeReferenceNode)
  type Foo = {
    bar: Array<string>
         ~~~~~~~~~~~~~ [failure]
  }

}

[failure]: Only ReadonlyArray allowed.
