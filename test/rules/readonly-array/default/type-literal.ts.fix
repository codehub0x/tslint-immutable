// -- Top-level type literal

// Should fail on Array as type literal member (TypeReferenceNode)
let foo: { bar: ReadonlyArray<string> };

// -- Local type literal

// Should fail on Array as type literal member as function parameter (TypeReferenceNode)
function foo(param1: { bar: ReadonlyArray<string>, boo: ReadonlyArray<string> }) {

  // Should fail on Array as type literal member (TypeReferenceNode)
  let foo: { bar: ReadonlyArray<string>, boo: ReadonlyArray<string> };

}

// Should fail on Array as type literal member as function parameter (TypeReferenceNode)
const foo = (param1: { bar: ReadonlyArray<string>, boo: ReadonlyArray<string> }) => {

  // Should fail on Array as type literal member (TypeReferenceNode)
  let foo: { bar: ReadonlyArray<string>, boo: ReadonlyArray<string> };

}

